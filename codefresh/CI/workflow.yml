version: '1.0'
# Stages can help you organize your steps in stages
stages:
  - clone
  - build
  - test
  - wait-when-pr
  - staging
  - wait-before-prod
  - production
  - after-deployment

steps:
  clone:
    title: Cloning repository
    type: git-clone
    repo: 'DaPulse/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    git: Dapulse-OAuth2
    stage: clone

  test_if_image_exists:
    type: freestyle
    title: 'Testing if image already exists'
    stage: 'build'
    fail_fast: false
    image: 302157828541.dkr.ecr.us-east-1.amazonaws.com/${{CF_REPO_NAME}}:${{CF_REVISION}}
    commands:
      - echo "image exists"
      - cf_export build=302157828541.dkr.ecr.us-east-1.amazonaws.com/${{CF_REPO_NAME}}:${{CF_REVISION}}

  notify_on_build_start:
    title: Notify on build start
    type: monday/infra_api
    stage: build
    arguments:
      ENVIRONMENT: ${{ENVIRONMENT}}
      METHOD_TYPE: PUT
      METHOD_NAME: metrics
      METHOD_BODY: '{ "status":"start", "scope":"build" }'
      METHOD_QUERY_PARAMS: metricType=build
    when:
      condition:
        all:
          clone: clone.result == 'success'
          doesImageExist: test_if_image_exists.result == 'failure'
  build:
    title: Building Docker image
    type: build
    image_name: '${{CF_REPO_NAME}}'
    working_directory: '${{clone}}'
    tag: '${{CF_REVISION}}'
    dockerfile: Dockerfile
    registry_contexts:
      - aws-sandbox-use1
    stage: build
    when:
      condition:
        all:
          doesImageExist: test_if_image_exists.result == 'failure'

  notify_on_build_fail:
    title: Notify on build fail
    type: monday/infra_api
    stage: build
    arguments:
      ENVIRONMENT: ${{ENVIRONMENT}}
      METHOD_TYPE: PUT
      METHOD_NAME: metrics
      METHOD_BODY: '{ "status":"failed", "scope":"build" }'
      METHOD_QUERY_PARAMS: metricType=build
    when:
      condition:
        all:
          build: build.result == 'failure'

  notify_on_build_success:
    title: Notify on build success
    type: monday/infra_api
    stage: build
    arguments:
      ENVIRONMENT: ${{ENVIRONMENT}}
      METHOD_TYPE: PUT
      METHOD_NAME: metrics
      METHOD_BODY: '{ "status":"success", "scope":"build" }'
      METHOD_QUERY_PARAMS: metricType=build
    when:
      condition:
        all:
          build: build.result == 'success'

  deploy_staging:
    type: parallel
    title: Deploy staging
    stage: staging
    steps:
      staging_use1:
        title: Deploy staging use1
        type: codefresh-run
        arguments:
          PIPELINE_ID: redash/CD
          TRIGGER_ID: run-stage-use1
          BRANCH: '${{CF_BRANCH}}'
          SHA: '${{CF_REVISION}}'
          ENABLE_NOTIFICATIONS: true
          FOLLOW_LOGS: false
    when:
      condition:
        all:
          isPR: '"${{PR}}" != "true"'
          testsResult: test.result == 'success'


  push_tag:
    title: Push latest docker tag
    type: push
    candidate: '${{build}}'
    tag: latest
    stage: after-deployment
    when:
      condition:
        all:
          myCondition: deploy_staging.result == 'success'

  notify_deployment_finished_to_channel:
    stage: after-deployment
    title: Notify deploy has finished to slack channel
    type: monday/notify-deployment-finished-to-channel:0.0.34
    when:
      condition:
        all:
          after_slack_notifications: push_tag.result == 'success'
