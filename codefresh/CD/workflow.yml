version: '1.0'
# Stages can help you organize your steps in stages
stages:
  - clone
  - helm-diff
  - deploy
  - after-deployment

steps:
  clone:
    title: Cloning repository
    type: git-clone
    repo: 'DaPulse/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    git: Dapulse-OAuth2
    stage: clone
  helm_diff:
    type: helm
    title: Helm diff
    stage: helm-diff
    working_directory: '${{clone}}'
    arguments:
      action: auth
      skip_cf_stable_helm_repo: true
      helm_version: 3.2.1
      kube_context: ${{KUBE_CTX}}
      commands:
        - source /opt/bin/release_chart
        - 'helm plugin install https://github.com/databus23/helm-diff'
        - >-
          helm repo add chartmuseum
          https://"$HELMREPO_USERNAME":"$HELMREPO_PASSWORD"@$CHARTMUSEUM_HOST
        - helm repo update
        - helm repo list
        - helm search repo $CF_REPO_NAME
        - helm ls -n $CF_REPO_NAME
        - >-
          helm diff upgrade $CF_REPO_NAME chartmuseum/$CF_REPO_NAME -f
          helm_values/$ENVIRONMENT/$REGION_SHORT.yaml --set
          deployment.image.tag="$CF_REVISION" --namespace $CF_REPO_NAME --allow-unreleased
  notify_on_deploy_start:
    title: Notify on deploy start
    type: monday/infra_api
    stage: deploy
    arguments:
      ENVIRONMENT: ${{ENVIRONMENT}}
      METHOD_TYPE: PUT
      REGION: ${{REGION}}
      METHOD_NAME: metrics
      METHOD_BODY: '{ "status":"start", "scope":"deploy" }'
      METHOD_QUERY_PARAMS: metricType=deploy
  helm_deploy:
    type: helm
    stage: deploy
    title: 'deploy ${{ENVIRONMENT}}'
    working_directory: '${{clone}}'
    fail_fast: false
    arguments:
      action: auth
      skip_cf_stable_helm_repo: true
      helm_version: 3.2.1
      kube_context: ${{KUBE_CTX}}
      commands:
        - >-
          helm repo add chartmuseum
          https://"$HELMREPO_USERNAME":"$HELMREPO_PASSWORD"@$CHARTMUSEUM_HOST
        - helm repo update
        - helm repo list
        - helm search repo $CF_REPO_NAME
        - helm ls -n $CF_REPO_NAME
        - >-
          helm upgrade -i $CF_REPO_NAME chartmuseum/$CF_REPO_NAME -f
          helm_values/$ENVIRONMENT/$REGION_SHORT.yaml --set image.tag="$CF_REVISION" --namespace $CF_REPO_NAME --atomic --wait --debug --create-namespace
  notify_on_deploy_success:
    title: Notify on deploy success
    type: monday/infra_api
    stage: deploy
    arguments:
      ENVIRONMENT: ${{ENVIRONMENT}}
      METHOD_TYPE: PUT
      REGION: ${{REGION}}
      METHOD_NAME: metrics
      METHOD_BODY: '{ "status":"success", "scope":"deploy" }'
      METHOD_QUERY_PARAMS: metricType=deploy
    when:
      condition:
        all:
          myCondition: helm_deploy.result == 'success'
  notify_on_deploy_failed:
    title: Notify on deploy failed
    type: monday/infra_api
    stage: deploy
    arguments:
      ENVIRONMENT: ${{ENVIRONMENT}}
      METHOD_TYPE: PUT
      REGION: ${{REGION}}
      METHOD_NAME: metrics
      METHOD_BODY: '{ "status":"failed", "scope":"deploy" }'
      METHOD_QUERY_PARAMS: metricType=deploy
    when:
      condition:
        all:
          myCondition: helm_deploy.result == 'failure'
  post_deployment:
    type: parallel
    title: Post deployments tasks
    stage: after-deployment
    steps:
      report_to_coralogix:
        title: Report deployment to Coralogix
        type: monday/report_to_coralogix
        arguments:
          ENVIRONMENT: ${{ENVIRONMENT}}
          REGION: ${{REGION}}
          APPLICATION: '${{CF_REPO_NAME}}'
        when:
          condition:
            all:
              myCondition: helm_deploy.result == 'success'
      report_to_newrelic:
        title: Report deployment to NewRelic
        type: monday/report_to_newrelic
        arguments:
          ENVIRONMENT: ${{ENVIRONMENT}}
          REGION: ${{REGION}}
          NEW_RELIC_APPLICATION_ID: '${{NEW_RELIC_APPLICATION_ID}}'
        when:
          condition:
            all:
              myCondition: helm_deploy.result == 'success'
              isVarExists: 'includes("${{NEW_RELIC_APPLICATION_ID}}", "{{NEW_RELIC_APPLICATION_ID}}") == false'

  fail_pipeline_on_failure:
    title: 'Fail pipeline on deploy failure'
    type: 'freestyle'
    stage: 'after-deployment'
    image: 'busybox:stable'
    commands:
      - 'exit 1'
    when:
      condition:
        all:
          first: post_deployment.result == 'success'
          second: helm_deploy.result == 'failure'
